// Package context provides both the stdlib context package and functions
// for managing the context in the SDK.
// This package is a drop-in replacement for the stdlib context package.
package context

import (
	"log"

	"github.com/gostdlib/base/concurrency/background"
	"github.com/gostdlib/base/concurrency/worker"
	"github.com/gostdlib/base/context"
	"go.opentelemetry.io/otel/metric"

	"github.com/google/uuid"
)

// planIDKey is a key for the planID in context.Value .
type planIDKey struct{}

// actionIDKey is a key for the actionID in context.Value .
type actionIDKey struct{}


// Background returns a non-nil, empty [Context]. It is never canceled, and has no deadline.
// It is typically used by the main function, initialization, and tests, and as the top-level
// Context for incoming requests. This differs from the Background() function in the context package
// in that it attaches various clients to the context. This currently attaches:
//
// - log.Default(), a *slog.Logger.
// - metrics.Default(), a metric.MeterProvider.
// - worker.Default(), a *worker.Pool.
// - background.Default(), a *background.Tasks.
//
// These can be accessed using the Audit()/Log()/Metrics functions.
func Background() Context {
    // insert here anything you want attached to your Context object.
	return context.Background()
}

// Attach attaches the logger and metrics clients to the context.
// This is generally not called directly, but is used by Background() and
// things like RPC packages that need to attach these to an already existing context.
func Attach(ctx Context) Context {
    ctx = context.Attach(ctx)

	/* Add your own clients here if you need to attach at some other entry point not supported. */
	/* DO NOT USE THIS ON A CONTEXT GENERATED BY Background() */
	return ctx
}

// Log returns the logger attached to the context. If no logger is attached, it returns log.Default().
func Log(ctx Context) *log.Logger {
    return context.Log(ctx)
}

// Meter returns a metric.Meter scoped to the package that calls context.Meter(). If you need to have a
// sub-namespace for a specific package, you should use the MeterProvider() function to get the meter provider.
// If no meter is attached to the context it returns a meter from metrics.Default(). This may be a noop Meter.
func Meter(ctx Context, opts ...metric.MeterOption) metric.Meter {
    const stackFrame = 3
    return context.MeterWithStackFrame(ctx, stackFrame, opts...)
}

// MeterProvider returns a metric.MeterProvider attached to the context. If no meter provider is attached,
// it returns metrics.Default(). This may be a noop provider.
func MeterProvider(ctx Context) metric.MeterProvider {
    return context.MeterProvider(ctx)
}

// Pool returns the worker pool attached to the context. If no pool is attached, it returns worker.Default().
func Pool(ctx Context) *worker.Pool {
    return context.Pool(ctx)
}

// Tasks returns a background.Tasks attached to the context. If not tasks are attached,
// it returns background.Default().
func Tasks(ctx Context) *background.Tasks {
    return context.Tasks(ctx)
}

// SetShouldTrace attaches a boolean value to the context to indicate if the request should be traced.
// This is not usually used by a service, but by the middleware to determine if the request should
// be traced. This only works if done before the trace is started.
func SetShouldTrace(ctx context.Context, b bool) context.Context {
	return context.SetShouldTrace(ctx, b)
}

// ShouldTrace returns true if the request has had SetShouldTrace called on it.
func ShouldTrace(ctx context.Context) bool {
	return context.ShouldTrace(ctx)
}

// PlanID returns planID from a Context.
func PlanID(ctx context.Context) uuid.UUID {
	id, ok := ctx.Value(planIDKey{}).(uuid.UUID)
	if ok {
		return id
	}

	return uuid.Nil
}

// SetPlanID sets the planID for context.
func SetPlanID(ctx context.Context, id uuid.UUID) context.Context {
	return context.WithValue(ctx, planIDKey{}, id)
}

// ActionID returns actionID from a Context.
func ActionID(ctx context.Context) uuid.UUID {
	id, ok := ctx.Value(actionIDKey{}).(uuid.UUID)
	if ok {
		return id
	}
	return uuid.Nil
}

// SetActionID sets the actionID for context.
func SetActionID(ctx context.Context, id uuid.UUID) context.Context {
	return context.WithValue(ctx, actionIDKey{}, id)
}
